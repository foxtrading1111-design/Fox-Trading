generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model investments {
  id                  String   @id @default(cuid()) @db.VarChar(30)
  user_id             String   @db.VarChar(30)
  amount              Decimal  @db.Decimal(18, 2)
  package_name        String   @db.VarChar(100)
  monthly_profit_rate Decimal  @db.Decimal(5, 2)
  status              String   @db.VarChar(10)
  start_date          DateTime @db.Timestamp(6)
  unlock_date         DateTime @db.Timestamp(6)
  users               users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id], map: "idx_investments_user")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model transactions {
  id                            String            @id @default(cuid()) @db.VarChar(30)
  user_id                       String            @db.VarChar(30)
  amount                        Decimal           @db.Decimal(18, 2)
  type                          String            @db.VarChar(10)
  income_source                 String            @db.VarChar(32)
  description                   String?
  timestamp                     DateTime          @default(now()) @db.Timestamp(6)
  status                        String            @default("PENDING") @db.VarChar(10)
  monthly_income_source_user_id String?           @db.VarChar(30)
  referral_level                Int?
  unlock_date                   DateTime?         @db.Timestamp(6)
  deposit_metadata              deposit_metadata?
  users                         users             @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id, timestamp(sort: Desc)], map: "idx_transactions_user_time")
  @@index([income_source, type, user_id], map: "idx_transactions_income_source")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model users {
  id                  String             @id @default(cuid()) @db.VarChar(30)
  full_name           String             @db.VarChar(200)
  email               String             @unique @db.VarChar(200)
  password_hash       String?            @db.VarChar(200)
  referral_code       String             @unique @db.VarChar(32)
  sponsor_id          String?            @db.VarChar(30)
  role                String             @default("USER") @db.VarChar(10)
  googleId            String?            @unique @db.VarChar(100)
  created_at          DateTime           @default(now()) @db.Timestamp(6)
  position            String?            @db.VarChar(10)
  password_updated_at DateTime?          @db.Timestamp(6)
  country             String?            @db.VarChar(100)
  phone               String?            @db.VarChar(20)
  investments         investments[]
  transactions        transactions[]
  user_rewards        user_rewards[]
  users               users?             @relation("usersTousers", fields: [sponsor_id], references: [id], onUpdate: NoAction)
  other_users         users[]            @relation("usersTousers")
  wallet_addresses    wallet_addresses[]
  wallets             wallets?

  @@index([sponsor_id], map: "idx_users_sponsor")
  @@index([sponsor_id, position], map: "idx_users_sponsor_position")
}

model wallets {
  id      String  @id @default(cuid()) @db.VarChar(30)
  user_id String  @unique @db.VarChar(30)
  balance Decimal @default(0) @db.Decimal(18, 2)
  users   users   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model wallet_addresses {
  id          String   @id @default(cuid()) @db.VarChar(30)
  user_id     String   @db.VarChar(30)
  blockchain  String   @db.VarChar(20)
  address     String   @db.VarChar(200)
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  is_selected Boolean  @default(false)
  label       String?  @db.VarChar(100)
  users       users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, blockchain, address])
  @@index([user_id], map: "idx_wallet_addresses_user")
  @@index([user_id, blockchain], map: "idx_wallet_addresses_user_blockchain")
}

model rewards {
  id              String         @id @default(cuid()) @db.VarChar(30)
  reward_name     String         @db.VarChar(100)
  bonus_amount    Decimal        @db.Decimal(18, 2)
  rank_to_achieve Int
  timeframe_days  Int
  created_at      DateTime       @default(now()) @db.Timestamp(6)
  user_rewards    user_rewards[]
}

model user_rewards {
  id            String    @id @default(cuid()) @db.VarChar(30)
  user_id       String    @db.VarChar(30)
  reward_id     String    @db.VarChar(30)
  status        String    @db.VarChar(20)
  achieved_date DateTime? @db.Timestamp(6)
  created_at    DateTime  @default(now()) @db.Timestamp(6)
  rewards       rewards   @relation(fields: [reward_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users         users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, reward_id])
  @@index([user_id], map: "idx_user_rewards_user")
}

model deposit_metadata {
  id               String       @id @default(cuid()) @db.VarChar(30)
  transaction_id   String       @unique @db.VarChar(30)
  blockchain       String       @db.VarChar(20)
  screenshot       String?
  transaction_hash String?      @db.VarChar(200)
  wallet_address   String?      @db.VarChar(200)
  ip_address       String?      @db.VarChar(50)
  user_agent       String?
  created_at       DateTime     @default(now()) @db.Timestamp(6)
  transactions     transactions @relation(fields: [transaction_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([transaction_id], map: "idx_deposit_metadata_transaction")
}
